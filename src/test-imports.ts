// test-imports.ts - –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

console.log('üß™ Testing TypeScript imports...');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
import { 
  createTypeBus, 
  createCommand, 
  createQuery, 
  VERSION
} from './index';

console.log('‚úÖ All imports from index successful!');

/**
 * Runs a quick test of the main TypeBus-CQRS imports and logs the results.
 * @async
 * @returns {Promise<void>}
 */
async function quickTest() {
  console.log('\nüß™ Quick functionality test...');
  
  const bus = createTypeBus({ enableLogging: false });
  console.log('‚úÖ TypeBus-CQRS created with factory');
  
  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
  const TestCommand = createCommand(
    bus,
    'User.CreateUser',
    async (data) => {
      return { userId: `user-${data.name}`, events: [] };
    }
  );
  console.log('‚úÖ Command created');
  
  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
  const TestQuery = createQuery(
    bus,
    'User.GetUser',
    async (params) => {
      return { 
        id: params.userId, 
        name: 'Test User', 
        email: 'test@example.com', 
        createdAt: new Date() 
      };
    }
  );
  console.log('‚úÖ Query created');
  
  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  try {
    const commandResult = await TestCommand.execute(
      { name: 'World', email: 'test@example.com', password: 'password123' }, 
      'test-id'
    );
    console.log('‚úÖ Command executed:', commandResult);
    
    const queryResult = await TestQuery.execute({ userId: 'test-123' });
    console.log('‚úÖ Query executed:', queryResult);
    
    console.log('\nüéâ All functionality tests passed!');
    console.log(`üì¶ TypeBus-CQRS version: ${VERSION}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = bus.getStats();
    console.log('üìä Bus stats:', stats);
    
  } catch (error) {
    console.error('‚ùå Test execution failed:', error);
  }
}

if (require.main === module) {
  quickTest().catch(console.error);
}

export { quickTest };
