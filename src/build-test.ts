// build-test.ts - –¢–µ—Å—Ç —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
import { createTypeBus, createCommand, createQuery, VERSION } from './index';

console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ TypeBus-CQRS...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
console.log('‚úÖ createTypeBus –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', typeof createTypeBus === 'function');
console.log('‚úÖ createCommand –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', typeof createCommand === 'function');
console.log('‚úÖ createQuery –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', typeof createQuery === 'function');
console.log('‚úÖ VERSION –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', VERSION);

/**
 * Runs a quick test of the main TypeBus-CQRS functionality and logs the results.
 * @async
 * @returns {Promise<void>}
 */
async function quickTest() {
  console.log('\nüß™ Quick functionality test...');
  
  const bus = createTypeBus({ enableLogging: false });
  console.log('‚úÖ TypeBus-CQRS —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  
  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
  const testCommand = createCommand(
    bus,
    'User.CreateUser',
    async (data) => {
      console.log('‚ö° Command processing data:', { name: data.name, email: data.email });
      return { userId: `user-${data.name}`, events: [`user-${data.name}-created`] };
    }
  );
  console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  
  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
  const testQuery = createQuery(
    bus,
    'User.GetUser',
    async (params) => {
      console.log('üîç Query processing params:', params);
      return { 
        id: params.userId, 
        name: 'Test User', 
        email: 'test@example.com', 
        createdAt: new Date() 
      };
    }
  );
  console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  
  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  try {
    const commandResult = await testCommand.execute(
      { name: 'World', email: 'test@example.com', password: 'password123' }, 
      'test-id'
    );
    console.log('‚úÖ Command executed:', commandResult);
    
    const queryResult = await testQuery.execute({ userId: 'test-123' });
    console.log('‚úÖ Query executed:', queryResult);
    
    console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üì¶ TypeBus-CQRS –≤–µ—Ä—Å–∏—è: ${VERSION}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = bus.getStats();
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Bus:', stats);
    
  } catch (error) {
    console.error('‚ùå Test execution failed:', error);
  }
}

if (require.main === module) {
  quickTest().catch(console.error);
}

export { quickTest };
